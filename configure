#! /bin/sh

#AR, CC, CXX  (normal ar, cc und c++)
#SO, PI, LD, LS (normal alles $(CC) oder $(CXX), je nach dem, ob da C++-Dateien 
#involviert sind oder nicht.

#
# Some general purpose functions
#

# Take first argument, and print:
# true       if it is either yes, on, 1, true, enable(d)
# false      if it is either no, off, 0, false, disable(d)
# undefined  if it is anything different
boolean () {
	case "$1" in
		yes)      echo true; ;;
		on)       echo true; ;;
		1)        echo true; ;;
		true)     echo true; ;;
		enable)   echo true; ;;
		enabled)  echo true; ;;
		
		no)       echo false; ;;
		off)      echo false; ;;
		0)        echo false; ;;
		false)    echo false; ;;
		disable)  echo false; ;;
		disabled) echo false; ;;
		
		*)        echo undefined; ;;
	esac
}

bell () {
	if ! $no_bell
	then
		echo
		echo "$1"
		echo
		echo " * (omit this (and any other) warning in future using --no-bell switch)"
		for i in 1 2 3 4 5;
		do
			echo -en "\a"
			sleep 1
		done
		echo
	fi
}

#
# Setup and cleanup
#

cmdline () {
	# Set defaults
	CC=gcc
	CXX=g++
	CPP=cpp
	HAVE_ANSI_COLORS=true
	
	test -x ./configure-prev && . ./configure-prev
	
	# Process command line
	
	BAILOUT=false
	no_bell=false
	
	while test $# != 0
	do
		case "$1" in
			--cc)
				shift
				CC="$1"
				shift
				;;
			
			--cxx)
				shift
				CXX="$1"
				shift
				;;
			
			--cpp)
				shift
				CPP="$1"
				shift
				;;
			
			--have-ansi-colors)
				shift
				HAVE_ANSI_COLORS=`boolean "$1"`
				shift
				;;
			
			--no-bell)
				shift
				no_bell=true
				;;
			
			*)
				echo "Unknown argument $1"
				BAILOUT=true
				shift
				;;
		esac
	done
	
	if $BAILOUT
	then
		cat >&2 <<EOF
Syntax: $0 [options]

Availaible options + meaning

	[argument]		[description of the 'enable'-form.]
	
	--cc <$CC> (Master default is gcc)
	
		Specify the 3.x.y gcc C compiler
	
	--cxx <$CXX> (Master default is g++)
	
		Specify the 3.x.y gcc C++ compiler
	
	--cpp <$CPP> (Master default is cpp)
	
		Specify the 3.x.y gcc C preprocessor
	
	--have-ansi-colors <bool> (Master default is true)
	
		Tell, if you want the BtMakeFile to output using colors. 
EOF
		exit 1
	fi
	
	# Store changed values
	
	cat >configure-prev <<EOF
CC=$CC
CXX=$CXX
CPP=$CPP
HAVE_ANSI_COLORS=$HAVE_ANSI_COLORS
EOF

	chmod +x configure-prev
}

setup () {
	# Get some common variables
	
	AUTOGENWARNING="###########################################################################
#
#   ***  WARNING  ***  WARNING  ***  WARNING  ***
#
###########################################################################
#
# Automatic generated file. Don't modify this file.
#
# Generated on `date` by configure
#
###########################################################################"
	
	# Initialise some files
	
	cat > Makefile.System <<EOF
$AUTOGENWARNING
#
# This are configuration variables which only describe the system's 
# properties, and should therefore never need to be overridden.
#
###########################################################################

ifndef COMPILER
COMPILER=DEFAULT
endif

ifeq (\$(COMPILER),DEFAULT)
CONFIGURE_CPP = $CPP -E
CONFIGURE_CS  = $CC -S
CONFIGURE_CXS = $CXX -S
CONFIGURE_CC  = $CC -c
CONFIGURE_CXX = $CXX -c
CONFIGURE_SO  = $CXX -shared
CONFIGURE_PI  = $CXX -shared
CONFIGURE_DE  = $CXX
CONFIGURE_SE  = $CXX -static
CONFIGURE_AR  = ar
endif

ifeq (\$(COMPILER),GCC)
CONFIGURE_CPP = cpp -E
CONFIGURE_CS  = gcc -S
CONFIGURE_CXS = g++ -S
CONFIGURE_CC  = gcc -c
CONFIGURE_CXX = g++ -c
CONFIGURE_SO  = g++ -shared
CONFIGURE_PI  = g++ -shared
CONFIGURE_DE  = g++
CONFIGURE_SE  = g++ -static
CONFIGURE_AR  = ar
endif

ifeq (\$(COMPILER),LLVM)
COMPILER=CLANG
endif

ifeq (\$(COMPILER),CLANG)
CONFIGURE_CPP = clang -E
CONFIGURE_CS  = clang -S
CONFIGURE_CXS = clang++ -S
CONFIGURE_CC  = clang -c
CONFIGURE_CXX = clang++ -c
CONFIGURE_SO  = clang++ -shared
CONFIGURE_PI  = clang++ -shared
CONFIGURE_DE  = clang++
CONFIGURE_SE  = clang++ -static
CONFIGURE_AR  = ar
endif

HAVE_ANSI_COLORS = $HAVE_ANSI_COLORS

EOF

	test -d wrappers && rm -fr wrappers
	mkdir wrappers
	
	# Makeline Merge sed script
	cat >configure.sed <<EOF
:goon
s/\\\\//
t append
q
:append
N
s/\\
//
t goon
b goon
EOF
}

cleanup () {
	rm -f configure.*
}

#
# The actual testing functions
#

test4ostype () {
	echo -n "Checking, what platform you are using ... "
	
	OSTYPE=`uname -s`
	
	if test -z "$OSTYPE"; then
		cat <<EOF
failed!

Oops, »uname -s« returned an empty string.

If you know a *secure* way to identify your platform, report it.
That will be the first step for supporting your platform.

Hint: You may try to make all-linux or similar, to test, if 
      that works for you. If it does, please report it to me.

Skipping generation of forward rules for all
EOF
	else
		echo "$OSTYPE"
		
		echo -n "Checking if your os is supported ... "
		
		case "$OSTYPE" in
			Linux)
				echo "yes"
				TARGET_LC="linux"
				TARGET_UC="LINUX"
				;;
			
			MINGW32_*|CYGWIN_*)
				echo "yes"
				TARGET_LC="win32"
				TARGET_UC="WIN32"
				;;
			
			FreeBSD|NetBSD|OpenBSD|SunOS)
				cat <<EOF
no!

Hint: You may try to make all-linux or similar, to test, if 
      that works for you. If it does, please report it to me.

Skipping generation of forward rules for all
EOF
				exit 1
				;;
			
			Darwin)
				echo "yes"
				TARGET_LC="macosx"
				TARGET_UC="MACOSX"
				;;
			
			For_BeOS:)
				echo "yes"
				TARGET_LC="beos"
				TARGET_UC="BEOS"
				;;
			
			*)
				cat <<EOF
no!

Please report the following OS identification string to me: <$OSTYPE>

Hint: You may try to make all-linux or similar, to test, if 
      that works for you. If it does, please report it to me.

Skipping generation of forward rules for all
EOF
				;;
		esac
	fi
	
	cat >>Makefile.System <<EOF
ifndef TARGET

ALL=skip-all
CLEAN=skip-clean
DEPCLEAN=skip-depclean
DEP=skip-dep
INSTALL=skip-install

all: all-$TARGET_LC
clean: clean-$TARGET_LC
depclean: depclean-$TARGET_LC
dep: dep-$TARGET_LC
install: install-$TARGET_LC

else

ALL=real-all
CLEAN=real-clean
DEPCLEAN=real-depclean
DEP=real-dep
INSTALL=real-install

include \$(BTMAKEPATH)/Makefile.Config.\$(TARGET)

endif
EOF
}

test4gcc3 () {
	echo -n "Checking wether $1 is gcc-3 ... "
	if test "`$1 -dumpversion | awk -F . '{ print $1 }' 2>/dev/null`" -ge 3; then
		echo "yes"
	else
		echo "no"
		cat >&2 <<EOF

Your default gcc is not of version 3.x.y. We need at gcc 3.x.y to work. 
Please call configure and specify --cc <gcc-3> with <gcc-3> being the 
name of the executable of gcc 3.x.y or higher.
EOF
		exit 1
	fi
}

test4gpp3 () {
	echo -n "Checking wether $1 is g++-3 ... "
	if test "`$1 -dumpversion | awk -F . '{ print $1 }' 2>/dev/null`" -ge 3; then
		echo "yes"
	else
		echo "no"
		cat >&2 <<EOF

Your default g++ is not of version 3.x.y. We need at g++ 3.x.y to work. 
Please call configure and specify --cxx <g++-3> with <g++-3> being the 
name of the executable of g++ 3.x.y or higher.
EOF
		exit 1
	fi
}

test4cpp3 () {
	echo -n "Checking wether $1 is cpp-3 ... "
	if test "`$1 -dumpversion | awk -F . '{ print $1 }' 2>/dev/null`" -ge 3; then
		echo "yes"
	else
		echo "no"
		cat >&2 <<EOF

Your default cpp is not of version 3.x.y. We need at cpp 3.x.y to work. 
Please call configure and specify --cpp <cpp-3> with <cpp-3> being the 
name of the executable of cpp 3.x.y or higher.
EOF
		exit 1
	fi
}

test4sint_overflow () {
	echo -n "Checking for gcc-4.1 signed integer overflow bug ... "
	if ./test4sint_overflow.sh "$CC -c" "$CC" quiet
	then
		echo "not present ;-)"
	else
		echo "present"
		bell "$(./test4sint_overflow.sh "$CC -c" "$CC" 2>&1)"
	fi
}

test4stringB4stdbool_h () {
	echo -n "Checking wether <string> must be included before <stdbool.h> ... "
	cat >configure.cpp <<EOF
#include <stdbool.h>
#include <string>
int main(void) {}
EOF
	if $CXX -W -Wall configure.cpp -c -o configure.o 2>/dev/null; then
		echo "no"
	else
		echo "yes, generating wrapper stdbool.h file"
		cat >configure.cpp <<EOF
#include <stdbool.h>
int main(void) {}
EOF
		STDBOOL_H=`( $CXX -W -Wall configure.cpp -E -M -MP -o configure.o; cat configure.o; ) | tee configure.stdbool.h.MP | sed -f configure.sed | tee configure.stdbool.h.MP2 | awk '{ print $3 }'`
		cat >configure.cpp <<EOF
#include <string>
int main(void) {}
EOF
		STRING=`( $CXX -W -Wall configure.cpp -E -M -MP -o configure.o; cat configure.o; ) | tee configure.string.MP | sed -f configure.sed | tee configure.string.MP2 | awk '{ print $3 }'`
		cat > wrappers/stdbool.h << EOF
/*
$AUTOGENWARNING
*/

#ifdef __cplusplus
#include "$STRING"
#endif /* #ifdef __cplusplus */
#include "$STDBOOL_H"
EOF
	fi
}

test4TIOCGWINSZ () {
	echo -n "Checking if we have the winsize feature ... "
	
	cat >configure.c <<EOF
#include <termios.h>
#include <sys/ioctl.h>

int main(void) {
	struct winsize wsz;
	
	ioctl(0,TIOCGWINSZ,&wsz);
	
	return wsz.ws_row+wsz.ws_col;
}
EOF
	if gcc -c -o configure.o configure.c 2>configure.gcc-error
	then
		(
			echo
			echo "CPPFLAGS+=-DTIOCGWINSZ"
		) >> Makefile.System
		echo "yes"
	else
		echo "no"
	fi
}

test4pkgconfig () {
	if type -p pkg-config >/dev/null
	then
		HAVE_PKG_CONFIG=true
	else
		HAVE_PKG_CONFIG=false
	fi
}

test4gnet () {
	echo -n "Checking for libgnet ... "
	
	# First test for gnet-2.0
	if $HAVE_PKG_CONFIG \
	&& pkg-config gnet-2.0
	then
		HAVE_GNET=true
		HAVE_GNET_VERSION=$(pkg-config gnet-2.0 --modversion)
		echo "$HAVE_GNET_VERSION"
		(
			echo
			echo "HAVE_GNET=$HAVE_GNET"
			echo "HAVE_GNET_VERSION=$HAVE_GNET_VERSION"
			echo "BTMAKEFILE-GNET-CFLAGS=$(pkg-config gnet-2.0 --cflags)"
			echo "BTMAKEFILE-GNET-CPPFLAGS=-DHAVE_GNET -DHAVE_GNET_VERSION=\"HAVE_GNET_VERSION\""
			echo "BTMAKEFILE-GNET-LDFLAGS=$(pkg-config gnet-2.0 --libs)"
		) >> Makefile.System
	else
		if type -p gnet-config >/dev/null
		then
			HAVE_GNET=true
			HAVE_GNET_VERSION=$(gnet-config --version)
			echo "$HAVE_GNET_VERSION"
			(
				echo
				echo "HAVE_GNET=$HAVE_GNET"
				echo "HAVE_GNET_VERSION=$HAVE_GNET_VERSION"
				echo "BTMAKEFILE-GNET-CFLAGS=$(gnet-config --cflags)"
				echo "BTMAKEFILE-GNET-CPPFLAGS=-DHAVE_GNET -DHAVE_GNET_VERSION=\"HAVE_GNET_VERSION\""
				echo "BTMAKEFILE-GNET-LDFLAGS=$(gnet-config --libs)"
			) >> Makefile.System
		else
			echo "not found"
			bell "Programs using btmakefile won't use libgnet even if you install
it later until you reinstall btmakefile"
		fi
	fi
}

test4libcap () {
	echo -n "Checking for libcap ... "
	
	cat >configure.c <<EOF
#include <sys/capability.h>

int main(void) {
	cap_t caps;
	return 0;
}
EOF
	
	if gcc -c -o configure.o configure.c 2>configure.gcc-error
	then
		(
			echo
			echo "HAVE_LIBCAP=true"
			echo ""
			echo "BTMAKEFILE-LIBCAP-CPPFLAGS=-DHAVE_LIBCAP"
			echo "BTMAKEFILE-LIBCAP-LDFLAGS=-lcap"
		) >> Makefile.System
		echo "yes"
	else
		echo "no"
	fi
}

test4pkgconfig () {
	if type -p pkg-config >/dev/null
	then
		HAVE_PKG_CONFIG=true
	else
		HAVE_PKG_CONFIG=false
	fi
}

test4broken_64_bit_api () {
	echo -n "Checking wether files API is 64 bit safe ..."
	
	cat >configure.c <<EOF
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int fd;

void x(int pass) {
	off_t l=lseek(fd,0x70000000,SEEK_CUR);
	if (l/0x70000000!=pass) {
		exit(1);
	}
}

int main(int argc,char * argv[]) {
	fd=open("configure.tmp",O_CREAT|O_TRUNC,0666);
	if (fd<0) {
		printf("open: %s",strerror(errno));
		return 2;
	}
	
	x(1);
	x(2);
	x(3);
	
	if (fd+argc<fd) {
		puts(argv[0]);
	}
	
	return 0;
}
EOF
	first=true
	ARG=""
	while cmd="gcc $ARG -o configure.elf configure.c" \
	&& $cmd 2>configure.gcc-error
	do
		cat configure.gcc-error
		./configure.elf
		case "$?" in
			0)
				if $first
				then
					echo "yes"
				else
					echo "yes, but only with $ARG (foring it on)"
					echo "BTMAKEFILECPPFLAGS += $ARG" >>Makefile.System
				fi
				return 0
				;;
			1)
				ARG="-D_LARGE_FILES -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
				;;
			*)
				echo "couldn't determine"
				return 1
				;;
		esac
		if $first
		then
			first=false
		else
			break
		fi
	done
	if ! test -f configure.elf
	then
		echo "couldn't determine"
		cat configure.gcc-error
	fi
	echo "code was:"
	cat configure.c
	return 1
}

test4va_copy () {
	echo -n "Checking whether the macro va_copy is present in stdarg.h ..."
	
	cat >configure.c <<EOF
#include <stdarg.h>
int main(int argc,char * argv[]) {
	va_list a,b;
	va_copy(a,b);
}
EOF
	first=true
	ARG=""
	while cmd="gcc $ARG -o configure.elf configure.c"
	do
		$cmd 2>configure.gcc-error && {
			if $first
			then
				echo "yes"
				echo "BTMAKEFILECPPFLAGS += -DHAVE_VA_COPY" >>Makefile.System
			else
				echo "yes, but only with $ARG (foring it on)"
				echo "BTMAKEFILECPPFLAGS += -DHAVE_VA_COPY $ARG" >>Makefile.System
			fi
			return
		}
		if $first
		then
			ARG="-Dva_copy=__va_copy"
			first=false
		else
			break
		fi
	done
	echo "no"
}

test4ccflag_and_cxxflag () {
	CFLAG="$1"
	VNAME="$2"
	
	echo -n "Checking whether the flag $CFLAG is supported ... "
	
	cat >configure.c <<EOF
int main(int argc,char * argv[]) {
	return 0;
}
EOF
	first=true
	if cmd="gcc -c $CFLAG -o configure.o configure.c"
	then
		echo "yes"
		echo "$VNAME = $CFLAG" >>Makefile.System
	else
		echo "no"
		echo "$VNAME = " >>Makefile.System
	fi
}

test_4_x11 () {
	echo -n "Checking for X11 ... "
	
	cat >configure.c <<EOF
#include <X11/Xlib.h>
int main(int argc,char * argv[]) {
	XOpenDisplay(NULL);
	return 0;
}
EOF
	if cmd="gcc -o configure.elf configure.c"
	then
		echo "yes"
		echo "HAVE_X11 = true" >>Makefile.System
	else
		echo "no"
		echo "# HAVE_X11 - X11 was missing during configure run in btmakefile"
	fi
}

test_omit_framepointer () {
	echo -n "Checking for the correct name of -fno-omit-framepointer argument ... "
	
	cat >configure.c <<EOF
int main(int argc,char * argv[]) {
	return 0;
}
EOF
	for arg in \
		-fno-omit-framepointer \
		-fno-omit-frame-pointer \
		"" \
	; do
		if gcc -o configure.elf configure.c $arg 2>/dev/null
		then
			echo "NO_OMIT_FRAMEPOINTER = $arg" >>Makefile.System
			echo "$arg"
			return 0
		fi
	done
}

cat btmakefile.Makefile.head > btmakefile.Makefile

#
# And here is everything called
#

cmdline "$@"           || exit 1

# Wenn tiefe Suche nach brauchbaren gcc-Targets, JETZT den hier starten:
#
#	find / -type f -name '*-gcc' -not -name 'build-gcc' >/tmp/gcc-targets.lst 2>/dev/null &

setup                  || exit 1

test4ostype            || exit 1
test4gcc3 "$CC"        || exit 1
test4gpp3 "$CXX"       || exit 1
test4cpp3 "$CPP"       || exit 1
test4sint_overflow     || exit 1
test4stringB4stdbool_h || exit 1
test4TIOCGWINSZ        || exit 1
test4pkgconfig
test4gnet
test4libcap
test4broken_64_bit_api || exit 1
test4va_copy           || exit 1
test4ccflag_and_cxxflag "-fno-inline-small-functions" "FNO_LNLINE_SMALL_FUNCTIONS"
test_4_x11             || exit 1
test_omit_framepointer || exit 1

# TODO: Actually figure out, what CPU_CLASS is present
echo "CPU_CLASS = x86" >>Makefile.System
echo "CPU_ARCH = amd64" >>Makefile.System
# TODO: Actually figure out, whether i486 instructions are available
echo "BTMAKEFILECPPFLAGS += -DCPU_I486" >>Makefile.System

cat btmakefile.Makefile.foot >> btmakefile.Makefile

make BTMAKEPATH=. --always-make -f Makefile Makefile.Include

make BTMAKEPATH=. --always-make -f btmakefile.Makefile clean
make BTMAKEPATH=. --always-make -f btmakefile.Makefile all

# Wenn tiefe Suche nach brauchbaren gcc-Targets, JETZT auf find warten, und 
# danach prüfen, ob die Zusatztools alle unter den entsprechenden Präfig 
# vorhanden sind, und ob sich alles im Pfad befindet.
#
#Ansatz:
#
#for i in `cat /tmp/gcc-targets.lst`
#do
#	find "$i" -true -printf "%f\n"
#done | sort -u | (
#	while read gcc
#	do
#		if $gcc --version > /dev/null 2>&1
#		then
#			echo "$gcc"
#		fi
#	done
#)

cleanup                || exit 1

#(
#	gcc --version && g++ --version && test "`gcc -dumpversion`" = "`g++ -dumpversion`" && ar --version
#) >/dev/null 2>/dev/null && echo "ok"
